<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javaweb反射机制]]></title>
    <url>%2F2020%2F06%2F04%2Fjava%2Fjavaweb%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[反射机制JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法 获取 Class 对象的两种方式 知道具体类的情况下可以使用： 1Class alunbarClass = TargetObject.class; 通过 Class.forName()传入类的路径获取： 1Class alunbarClass1 = Class.forName(&quot;cn.javaguide.TargetObject&quot;); 使用方法123456789101112131415161718192021222324252627282930313233/** * 获取TargetObject类的Class对象并且创建TargetObject类实例 */Class&lt;?&gt; tagetClass = Class.forName("cn.javaguide.TargetObject");TargetObject targetObject = (TargetObject) tagetClass.newInstance();/** * 获取所有类中所有定义的方法 */Method[] methods = tagetClass.getDeclaredMethods();for (Method method : methods) &#123; System.out.println(method.getName());&#125;/** * 获取指定方法并调用 */Method publicMethod = tagetClass.getDeclaredMethod("publicMethod", String.class);publicMethod.invoke(targetObject, "JavaGuide");/** * 获取指定参数并对参数进行修改 */Field field = tagetClass.getDeclaredField("value");//为了对类中的参数进行修改我们取消安全检查field.setAccessible(true);field.set(targetObject, "JavaGuide");/** * 调用 private 方法 */Method privateMethod = tagetClass.getDeclaredMethod("privateMethod");//为了调用private方法我们取消安全检查privateMethod.setAccessible(true);privateMethod.invoke(targetObject); 反射机制优缺点 优点： 运行期类型的判断，动态加载类，提高代码灵活度。通常公司业务框架设计都会使用到。 缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多。 安全问题，让我们可以动态操作改变类的属性同时也增加了类的安全隐患。 反射的应用场景 我们在使用 JDBC 连接数据库时使用 Class.forName()通过反射加载数据库的驱动程序； Spring 框架的 IOC（动态加载管理 Bean）创建对象以及 AOP（动态代理）功能都和反射有联系； 动态配置实例的属性； 模版设计模式等，解藕方式的一种 转载：https://snailclimb.gitee.io/javaguide/#/docs/java/basic/reflection]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2020%2F05%2F25%2Fspringboot%2FSpring%20Data%20JPA%20one%20to%20one%20%E5%85%B1%E4%BA%AB%E4%B8%BB%E9%94%AE%E5%85%B3%E8%81%94%2F</url>
    <content type="text"><![CDATA[https://blog.csdn.net/weixin_30361753/article/details/99055482 1234567891011121314151617181920212223242526272829303132333435@Entitypublic class Token &#123; @Id @Column(name = &quot;store_id&quot;) private Long storeId; @JsonIgnore @OneToOne @MapsId @JoinColumn(name = &quot;store_id&quot;) private Store store; private String value; public Store getStore() &#123; return store; &#125; public void setStore(Store store) &#123; this.store = store; &#125; public Long getStoreId() &#123; return storeId; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[cxf动态调用Webservice客户端越来越慢问题]]></title>
    <url>%2F2020%2F05%2F08%2Fwebservice%2Fcxf%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8Webservice%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%85%A2%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[背景 Springboot应用搭建的定时任务模块，其中一个定时任务会单线程调用Webservice接口，数据量比较多； 启动应用后，定时任务开始执行，该接口从一开始耗时400ms，经过10分钟后700ms，慢慢会上升到3000ms 重启应用又出现这种情况，动态客户端代码调用如下 12345678910public static Object callService(String servicePath, String serviceName, String requestXml,String userName,String passWord) throws Exception &#123; JaxWsDynamicClientFactory dcflient = JaxWsDynamicClientFactory.newInstance(); Client client = dcflient.createClient(servicePath); // 自定义的鉴权过滤器 client.getOutInterceptors().add(new ClientLoginInterceptor(userName, passWord)); Object[] objects = client.invoke(serviceName, requestXml); return objects[0]; &#125; 解决 发现是数据量较多频繁调用，每次都要新建一个工厂实例，并且创建client需要与服务器握手导致的 查询org.apache.cxf.endpoint.Client接口中提供了销毁的方法destroy(),优化后 123456789101112public static Object callService(String servicePath, String serviceName, String requestXml,String userName,String passWord) throws Exception &#123; JaxWsDynamicClientFactory dcflient = JaxWsDynamicClientFactory.newInstance(); Client client = dcflient.createClient(servicePath); client.getOutInterceptors().add(new ClientLoginInterceptor(userName, passWord)); Object[] objects = client.invoke(serviceName, requestXml); // 使用完销毁 client.destroy(); return objects[0]; &#125; 优化 数据量较多的情况下，频繁创建新的实例和服务器握手，损耗了太大性能了，缓存客户端对象 1234567891011121314private static Map&lt;String, Client&gt; wsClientMap = new HashMap&lt;&gt;();public static Object callService(String servicePath, String serviceName, String requestXml,String userName,String passWord) throws Exception &#123; String key = servicePath + ":" + userName + ":" + passWord; Client client = wsClientMap.get(key); if (client == null) &#123; JaxWsDynamicClientFactory dcflient = JaxWsDynamicClientFactory.newInstance(); client = dcflient.createClient(servicePath); client.getOutInterceptors().add(new ClientLoginInterceptor(userName, passWord)); wsClientMap.put(key, client); &#125; Object[] objects = client.invoke(serviceName, requestXml); return objects[0]; &#125;]]></content>
      <categories>
        <category>Webservice</category>
      </categories>
      <tags>
        <tag>Webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis五大数据类型-Hash]]></title>
    <url>%2F2020%2F04%2F12%2Fredis%2FRedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-Hash%2F</url>
    <content type="text"><![CDATA[Hash(哈希)Map集合,key-Map,像是java中Map&lt;String,Map&gt;类型 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495hset hget hmset hmget hgetalllzh0713@localhost ~/D/r/redis-5.0.8&gt; src/redis-cli # 打开客户端连接127.0.0.1:6379&gt; ping # 检测连通PONG127.0.0.1:6379&gt; hset myhash field1 hello # hset 设置一个key具体的map(integer) 1127.0.0.1:6379&gt; hget myhash field1 # hget 获取某个key某个值"hello"127.0.0.1:6379&gt; hmset myhash field2 world field3 test # hmset 设置某个key多个具体的key-valueOK127.0.0.1:6379&gt; hmget myhash field1 field2 field3 # hmget 获取某个key的多个值1) "hello"2) "world"3) "test"127.0.0.1:6379&gt; hgetall myhash # hgetall 获取某个key所有map1) "field1"2) "hello"3) "field2"4) "world"5) "field3"6) "test"127.0.0.1:6379&gt; hdel myhash field1 # hdel 删除某个key的某个值(integer) 1127.0.0.1:6379&gt; hgetall myhash1) "field2"2) "world"3) "field3"4) "test"#################127.0.0.1:6379&gt; flushdb # 清空当前dbOK127.0.0.1:6379&gt; keys * # 查看当前db所有key(empty list or set)#################hlen 获取某个key的长度127.0.0.1:6379&gt; hmset myhash field1 hello field2 world field3 lzh0713OK127.0.0.1:6379&gt; hgetall myhash1) "field1"2) "hello"3) "field2"4) "world"5) "field3"6) "lzh0713"127.0.0.1:6379&gt; hlen myhash # 获取某个key的长度(integer) 3#################hexists 判断某个key的字段是否存在127.0.0.1:6379&gt; hexists myhash field1 # 判断某个key的字段是否存在(integer) 1127.0.0.1:6379&gt; hexists myhash field5(integer) 0#################hkeys 只获取所有的keyhvals 只获取所有的value127.0.0.1:6379&gt; hkeys myhash # 获取所有的key1) "field1"2) "field2"3) "field3"127.0.0.1:6379&gt; hvals myhash # 获取所有的value1) "hello"2) "world"3) "lzh0713"127.0.0.1:6379&gt;#################hincrby # 指定某个key自增hsetnx # 判断字段是否存在，不在则设置127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; hset myhash field1 5(integer) 1127.0.0.1:6379&gt; hincrby myhash field1 1 # 指定某个key自增1(integer) 6127.0.0.1:6379&gt; hgetall myhash1) "field1"2) "6"127.0.0.1:6379&gt; hincrby myhash field1 -1 # 指定某个key自增-1(integer) 5127.0.0.1:6379&gt; hgetall myhash1) "field1"2) "5"127.0.0.1:6379&gt; hsetnx myhash field1 hello # 判断字段是否存在，在则不操作(integer) 0127.0.0.1:6379&gt; hsetnx myhash field2 hello # 判断字段是否存在，不在则设置(integer) 1127.0.0.1:6379&gt; hgetall myhash1) "field1"2) "5"3) "field2"4) "hello" Hash 适合对象存储，比如设置某个用户的信息 ,String适合存储单个信息 1234567891011121314127.0.0.1:6379&gt; hmset user:1 name lzh0713 age 25OK127.0.0.1:6379&gt; hmset user:2 name test age 30OK127.0.0.1:6379&gt; hgetall user:11) "name"2) "lzh0713"3) "age"4) "25"127.0.0.1:6379&gt; hgetall user:21) "name"2) "test"3) "age"4) "30" 参考官方文档：https://redis.io/commands]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis五大数据类型-Zset]]></title>
    <url>%2F2020%2F04%2F12%2Fredis%2FRedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-Zset%2F</url>
    <content type="text"><![CDATA[Zset(有序集合)在set的基础上，添加了一个计数位 zdd k1 score1 v1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748zadd # 为某个key指定序号添加一个值zrange # 获取某个key所有者127.0.0.1:6379&gt; zadd myzset 1 hello(integer) 1127.0.0.1:6379&gt; zadd myzset 2 world(integer) 1127.0.0.1:6379&gt; zrange myzset 0 -11) "hello"2) "world"#################zrange # 排序，按score从小到大zrevrange # 排序，score从大到小zrangebyscore # 指定范围排序，从小到大127.0.0.1:6379&gt; zadd myset 80 xiaoming(integer) 1127.0.0.1:6379&gt; zadd myset 88 xiaohong(integer) 1127.0.0.1:6379&gt; zadd myset 100 xiaoniu(integer) 1127.0.0.1:6379&gt; zrange myset 0 -1 # 排序，按score从小到大1) "xiaoming"2) "xiaohong"3) "xiaoniu"127.0.0.1:6379&gt; zrevrange myset 0 -1 # 排序，score从大到小1) "xiaoniu"2) "xiaohong"3) "xiaoming"127.0.0.1:6379&gt; zrangebyscore myset -inf +inf # 无穷小到无穷大，小小到大1) "xiaoming"2) "xiaohong"3) "xiaoniu"#################zrem 移除有序集合指定元素zcard 获取有序集合个数zcount 获取指定区间数量#################127.0.0.1:6379&gt; zcard myset(integer) 5127.0.0.1:6379&gt; zrem myset xiaoming # 移除有序集合指定元素(integer) 1127.0.0.1:6379&gt; zcard myset # 获取有序集合个数(integer) 4127.0.0.1:6379&gt; zcount myset 80 100 #获取指定区间数量(integer) 2 可用于成绩记录，工资记录，排序并快速实现一下区间操作 参考官方文档：https://redis.io/commands]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker运行Redis]]></title>
    <url>%2F2020%2F04%2F11%2Fredis%2FDocker%E8%BF%90%E8%A1%8CRedis%2F</url>
    <content type="text"><![CDATA[查询Redis镜像1liangzhihong@localhost ~&gt; docker search redis # 查询Redis镜像，其他镜像也可以这个docker命令 下载Redis镜像 查询后发现有很多Redis镜像，这里下载官方的 12liangzhihong@localhost ~&gt; docker pull redis # 默认下载最新的镜像，也可以指定版本下载liangzhihong@localhost ~&gt; docker pull redis:latest # 指定版本下载 下载完之后查看镜像存在 123liangzhihong@localhost ~&gt; docker images # 查看镜像列表REPOSITORY TAG IMAGE ID CREATED SIZEredis latest 4cdbec704e47 11 days ago 98.2MB 容器中运行Redis镜像 执行docker运行镜像命令 12345678910liangzhihong@localhost ~&gt; docker run --name redis -p 6379:6379 -d redis # --name 指定容器的名称。-p 指定镜像端口映射到本机端口（Redis的默认6379端口）6c8c87b003c16e102805c68487dd1857b9331a8f816db2252e5d6850909d7f09 # 这个就是返回容器的idliangzhihong@localhost ~&gt; docker ps # 查看运行的容器 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6c8c87b003c1 redis "docker-entrypoint.s…" 2 minutes ago Up 2 minutes 0.0.0.0:6379-&gt;6379/tcp redisliangzhihong@localhost ~&gt; docker ps -a # 查看所有容器，包括停止运行的容器liangzhihong@localhost ~&gt; docker stop redis # 通过容器名称停止容器liangzhihong@localhost ~&gt; docker stop 6c8c87b003c1 # 通过容器id停止容器 liangzhihong@localhost ~&gt; docker start redis # 下次直接运行容器就好了 停止应用，挂载本地配置文件重新启动容器 12345678910111213141516171819202122## 由于官方镜像不带redis.conf配置文件，需要到官网下载http://download.redis.io/redis-stable/redis.confliangzhihong@localhost ~&gt; docker stop redis redisliangzhihong@localhost ~&gt; docker rm redis # 删除容器liangzhihong@localhost ~&gt; docker run --name redis -p 6379:6379 -v ~/Docker/redis/conf/redis.conf:/etc/redis/redis.conf -v ~/Docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes # 创建启动容器，加载配置文件并持久化数据1c8f8b657bd7d3e9f6d8334bf36ed293bc6a150347454a1db97fb0f00c87e27aliangzhihong@localhost ~&gt; docker ps # 检查redis容器是否正常运行CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES1c8f8b657bd7 redis "docker-entrypoint.s…" 3 seconds ago Up 3 seconds 0.0.0.0:6379-&gt;6379/tcp redis##########################docker run --name redis -p 6379:6379 -v ~/Docker/redis/conf/redis.conf:/etc/redis/redis.conf -v ~/Docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes## docker命令参数说明-v ~/Docker/redis/conf/redis.conf:/etc/redis/redis.conf：映射配置文件-v ~/Docker/redis/data:/data ：映射数据目录redis-server /etc/redis/redis.conf：指定配置文件启动redis-server进程--appendonly yes：开启数据持久化 测试redis 123456789101112131415161718192021## 容器内部测试lzh0713@localhost ~&gt; docker exec -it redis bash # 以bash可视化进去到redis容器root@9fcfb4d143c3:/data# cd /usr/local/bin root@9fcfb4d143c3:/usr/local/bin# ls # redis的工具，客户端，服务端，压力测试工具都在这docker-entrypoint.sh gosu redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-sentinel redis-serverroot@9fcfb4d143c3:/usr/local/bin#root@9fcfb4d143c3:/usr/local/bin# ./redis-cli # 打开客户端 默认连接本地，6379端口 127.0.0.1:6379&gt; ping # 验证是否连通 ping pongPONG127.0.0.1:6379&gt;## 外部测试，上面我们下载的配置文件作为启动配置文件，默认是限制外部范围## 到https://redis.io/download官网下载redis 解压编译$ wget http://download.redis.io/releases/redis-5.0.8.tar.gz$ tar xzf redis-5.0.8.tar.gz$ cd redis-5.0.8$ makelzh0713@localhost ~/D/r/redis-5.0.8&gt; src/redis-cli # 打开客户端127.0.0.1:6379&gt; ping # 验证是否连通 Error: Server closed the connection # 服务拒绝！！！127.0.0.1:6379&gt; exit # 退出客户端 将本地的配置文件redis.conf做如下修改 12345## 将本地的配置文件redis.conf做如下修改bind 127.0.0.1 #注释掉这部分，这是限制redis只能本地访问protected-mode no #默认yes，开启保护模式，限制为本地访问daemonize no#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程，改为yes会使配置文件方式启动redis失败appendonly yes #redis持久化（可选） 重新生产容器并测试 12345678lzh0713@localhost ~/D/r/redis-5.0.8&gt; docker stop redis #停止容器 lzh0713@localhost ~/D/r/redis-5.0.8&gt; docker rm redis # 移除容器redislzh0713@localhost ~/D/r/redis-5.0.8&gt; docker run --name redis -p 6379:6379 -v ~/Docker/redis/conf/redis.conf:/etc/redis/redis.conf -v ~/Docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf # 重新生产容器## 重新测试，成功lzh0713@localhost ~/D/r/redis-5.0.8&gt; src/redis-cli127.0.0.1:6379&gt; pingPONG127.0.0.1:6379&gt; exit]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git分支管理常用命令]]></title>
    <url>%2F2020%2F03%2F16%2Fgit%2Fgit%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[12345git remote # 列出所有远程主机git remote update origin --prune # 更新远程主机origin 整理分支git branch -r # 列出远程分支git branch -vv # 查看本地分支和远程分支对应关系git checkout -b gpf origin/gpf # 新建本地分支gpf与远程gpf分支相关联 本地切换分支/创建分支/删除分支12345git branch [name] #本地创建分支git checkout -b [name] # 本地创建分支并切换git checkout [name] # 本地切换分支git branch -d [name] # 删除本地分支 删除远程分支12git push origin :[远程分支名称] # 推送空的本地分支到远程，达到删除git branch -r -d origin/[branch-name] #删除远程分支 查看分支123git branch # 查看本地分支git branch -r # 查看远程分支git branch -a # 查看本地和远程所有分支 如果远程新建了一个分支，本地没有该分支12# 本地会新建一个分支名叫 branch_name ，会自动跟踪远程的同名分支 branch_name。git checkout --track origin/branch_name 如果本地新建了一个分支 branch_name，但是在远程没有12# 自动在远程创建一个 branch_name 分支git push --set-upstream origin branch_name 合并分支12345678# 首先切换到本地master分支上git checkout master# 如果是多人开发的话需要把远程master上的代码pull下来git pull [origin master]# 然后我们把dev分支的代码合并到master上git merge dev# 然后查看状态git status 转载至：https://www.cnblogs.com/aaron-agu/p/10454788.html]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打包问题：roadhog build from UglifyJs]]></title>
    <url>%2F2020%2F03%2F13%2Fnpm%2F%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%9Aroadhog-build-from-UglifyJs%2F</url>
    <content type="text"><![CDATA[Error 0.0f3f4c41.async.js from UglifyJses5-imcompatible-versionses5-imcompatible-versions，用于收集 uglify 压缩有问题的 npm 包版本。然后再提供配套工具，自动 resolve 到项目里有问题的 npm 包路径，添加到 babel-loader 的 include 参数里。 roadhog确保 roadhog 在 2.4.0-beta.3 或以上，然后在 .webpackrc 里配： 123export default &#123; es5ImcompatibleVersions: true,&#125; 转载至：https://github.com/sorrycc/blog/issues/68]]></content>
      <tags>
        <tag>react</tag>
        <tag>radhong</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间复杂度和空间复杂度]]></title>
    <url>%2F2020%2F02%2F16%2F%E7%AE%97%E6%B3%95%2F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[算法算法的定义是这样的：解题方案的准确而完善的描述，是一系列解决问题的清晰指令。巴拉巴拉的，虽然是一小句但还是不想看（题外话：有时候吧专业名词记下来面试的时候还是挺有用的），其实就是解决一个问题的完整性描述。只不过这个描述就可能是用不同的方式或者说是“语言”了。 算法的效率既然算法是解决问题的描述，那么就像一千个人眼中有一千个阿姆雷特他大姨夫一样，解决同一个问题的办法也是多种多样的，只是在这过程中我们所使用/消耗的时间或者时间以外的代价（计算机消耗的则为内存了）不一样。为了更快、更好、更强的发扬奥利奥..哦不，提高算法的效率。所以很多时候一个优秀的算法就在于它与其他实现同一个问题的算法相比，在时间或空间（内存）或者时间和空间（内存）上都得到明显的降低。 所以呢，算法的效率主要由以下两个复杂度来评估： 时间复杂度：评估执行程序所需的时间。可以估算出程序对处理器的使用程度。空间复杂度：评估执行程序所需的存储空间。可以估算出程序对计算机内存的使用程度。 设计算法时，时间复杂度要比空间复杂度更容易出问题，所以一般情况一下我们只对时间复杂度进行研究。一般面试或者工作的时候没有特别说明的话，复杂度就是指时间复杂度。 时间复杂度接下来我们还需要知道另一个概念：时间频度。这个时候你可能会说：“不是说好一起学算法吗，这些东东是什么？赠品吗？”。非也非也，这是非卖品。 因为一个算法执行所消耗的时间理论上是不能算出来的，没错正是理论上，so我们任然可以在程序中测试获得。但是我们不可能又没必要对每个算法进行测试，只需要知道大概的哪个算法执行所花费的时间多，哪个花费的时间少就行了。如果一个算法所花费的时间与算法中代码语句执行次数成正比，那么那个算法执行语句越多，它的花费时间也就越多。我们把一个算法中的语句执行次数称为时间频度。通常（ps:很想知道通常是谁）用T(n)表示。 在时间频度T(n)中，n又代表着问题的规模，当n不断变化时，T(n)也会不断地随之变化。为了了解这个变化的规律，时间复杂度这一概念就被引入了。一般情况下算法基础本操作的重复执行次数为问题规模n的某个函数，用也就是时间频度T(n)。如果有某个辅助函数f(n)，当趋于无穷大的时候，T(n)/f(n)的极限值是不为零的某个常数，那么f(n)是T(n)的同数量级函数，记作T(n)=O(f(n))，被称为算法的渐进时间复杂度，又简称为时间复杂度。 大O表示法用O(n)来体现算法时间复杂度的记法被称作大O表示法 一般我们我们评估一个算法都是直接评估它的最坏的复杂度。 大O表示法O(f(n))中的f(n)的值可以为1、n、logn、n^2 等，所以我们将O(1)、O(n)、O(logn)、O( n^2 )分别称为常数阶、线性阶、对数阶和平方阶。下面我们来看看推导大O阶的方法： 推导大O阶 推导大O阶有一下三种规则： 用常数1取代运行时间中的所有加法常数 只保留最高阶项 去除最高阶的常数 举好多栗子 常数阶 123let sum = 0, n = 10; // 语句执行一次 let sum = (1+n)*n/2; // 语句执行一次 console.log(`The sum is : $&#123;sum&#125;`) //语句执行一次 这样的一段代码它的执行次数为 3 ，然后我们套用规则1，则这个算法的时间复杂度为O(1)，也就是常数阶。 线性阶 12345let i =0; // 语句执行一次 while (i &lt; n) &#123; // 语句执行n次 console.log(`Current i is $&#123;i&#125;`); //语句执行n次 i++; // 语句执行n次&#125; 这个算法中代码总共执行了 3n + 1次，根据规则 2-&gt;3，因此该算法的时间复杂度是O(n)。 对数阶 1234let number = 1; // 语句执行一次 while (number &lt; n) &#123; // 语句执行logn次 number *= 2; // 语句执行logn次&#125; 上面的算法中，number每次都放大两倍，我们假设这个循环体执行了m次，那么2^m = n即m = logn，所以整段代码执行次数为1 + 2*logn，则f(n) = logn，时间复杂度为O(logn)。 平方阶 12345for (let i = 0; i &lt; n; i++) &#123; // 语句执行n次 for (let j = 0; j &lt; n; j++) &#123; // 语句执行n^2次 console.log(&apos;I am here!&apos;); // 语句执行n^2 &#125;&#125; 上面的嵌套循环中，代码共执行 2*n^2 + n，则f(n) = n^2。所以该算法的时间复杂度为O(n^2 ) 常见时间复杂度的比较 常见的时间复杂度函数相信大家在大学中都已经见过了，这里也不多做解释了： O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n²)&lt;O(n³)&lt;O(2ⁿ)&lt;O(n!) 转载地址：https://zhuanlan.zhihu.com/p/32135157]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>时间复杂度</tag>
        <tag>空间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向过程和面向对象]]></title>
    <url>%2F2019%2F10%2F03%2Fjava%2F%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[什么是面向过程？概述: 自顶而下的编程模式.把问题分解成一个一个步骤，每个步骤用函数实现，依次调用即可。 就是说，在进行面向过程编程的时候，不需要考虑那么多，上来先定义一个函数，然后使用各种诸如if-else、for-each等方式进行代码执行。 最典型的用法就是实现一个简单的算法，比如实现冒泡排序。 什么是面向对象？概述: 将事务高度抽象化的编程模式.将问题分解成一个一个步骤，对每个步骤进行相应的抽象，形成对象，通过不同对象之间的调用，组合解决问题。 就是说，在进行面向对象进行编程的时候，要把属性、行为等封装成对象，然后基于这些对象及对象的能力进行业务逻辑的实现。 比如:想要造一辆车，上来要先把车的各种属性定义出来，然后抽象成一个Car类。 举例说明区别同样一个象棋设计. 面向对象:创建黑白双方的对象负责演算,棋盘的对象负责画布,规则的对象负责判断，例子可以看出,面向对象更重视不重复造轮子,即创建一次,重复使用. 面向过程:开始—黑走—棋盘—判断—白走—棋盘—判断—循环。只需要关注每一步怎么实现即可. 优劣对比面向对象:占用资源相对高,速度相对慢 面向过程:占用资源相对低,速度相对快 转载：https://github.com/hollischuang/toBeTopJavaer/blob/master/basics/java-basic/object-oriented-vs-procedure-oriented.md]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[平台无关性]]></title>
    <url>%2F2019%2F10%2F03%2Fjava%2F%E5%B9%B3%E5%8F%B0%E6%97%A0%E5%85%B3%E6%80%A7%2F</url>
    <content type="text"><![CDATA[平台无关性 一次编译，到处运行。 扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。 Java语言规范：例如规定int类型是4字节，不像C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。 Class文件：编译成Class文件的语言不只是java,还有Groovy、Scala、Jython等。 Java虚拟机（JVM）：编译器，JVM平台有关性，不同平台有对应的JVM，主要作用是把Class文件编译成只包含0和1的二进制文件，供机器识别。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot整合SpringSecurity后出现Post请求403的问题]]></title>
    <url>%2F2019%2F09%2F28%2Fspringboot%2FSpringBoot%E6%95%B4%E7%90%86SpringSecurity%E5%90%8E%E5%87%BA%E7%8E%B0Post%E8%AF%B7%E6%B1%82403%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述最近SpringBoot整合SpringSecurity出现Post请求被Forbidden 403的问题，翻阅资料后发现是由于csrf作怪，本人采用解决方式如下 处理方式12345678910111213141516171819202122@Configurationpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private Environment env; @Override public void configure(HttpSecurity http) throws Exception &#123; // @formatter:off for (String profile : env.getActiveProfiles()) &#123; // 加载dev环境下特殊配置 if (profile.contains(Constants.SPRING_PROFILE_DEVELOPMENT)) &#123; http.csrf().disable(); &#125; else &#123; // 非dev环境下开启csrf校验功能,设置过滤地址 http.csrf() .ignoringAntMatchers("/api/**"); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代理那些事]]></title>
    <url>%2F2019%2F09%2F08%2F%E4%BB%A3%E7%90%86%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[背景​ 在前段时间换了Macbook Pro，和公司的办公环境冲突啦，必须采用代理来处理办公环境的问题，这里总结我涉及到的代理那些事。 ​ 在换电脑之前，都是用Windows的笔记本，每次办公都是必须使用EasyConnect打开vpn连接到公司服务，比如使用公司的管理系统，开发数据库，项目管理仓库（svn,git），公司邮箱IBM等等。在换了新电脑Macbook Pro后，发现EasyConnect使用不到了，经过查询了解才发现，safari升级到12之后已经不支持EasyConnect旧服务了，vpn服务端只有升级才能让Macbook Pro使用，经过一番了解，之前同事就遇到这个问题，据说联系公司看能不能升级，结果。。。得到的回复是不升级，建议装虚拟机或者使用Windows电脑。两种方式我都不想啊，总不能我的新电脑没得发挥吧，之后就走上了折腾之路了。 Nginx正向代理​ 终端代理maven代理git代理基于Nginx反向代理实现数据库连接]]></content>
  </entry>
  <entry>
    <title><![CDATA[javaweb反射实例无法注入问题]]></title>
    <url>%2F2019%2F09%2F01%2Fjava%2Fjavaweb%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[无法注入的情况12Class clazz = Class.forName(handlerPkgPath);Objeact o = clazz.newInstance(); 解决方式12345@Autowiredprivate ApplicationContext context;......Objeact o = context.getAutowireCapableBeanFactory().createBean(clazz, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx 上传文件413报错]]></title>
    <url>%2F2019%2F08%2F17%2Fnginx%2FNginx-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6413%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[问题说明产生原因是因为客户端上传文件大小超过了nginx的限制，默认1M 官方解释如下：http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size 处理方式123Syntax: client_max_body_size size;Default: client_max_body_size 1m;Context: http, server, location 例如：打开配置文件nginx.conf，在http或server或location下添加 123456http &#123; ...client_max_body_size 8M; client_body_buffer_size 128k; ... &#125; 检查配置和重启即可 12$ nginx -t $ nginx -s reload 转载至：https://blog.51cto.com/hld1992/2133610?utm_source=oschina-app]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm run build超内存处理]]></title>
    <url>%2F2019%2F08%2F12%2Fnpm%2Fnpm-run-build%E8%B6%85%E5%86%85%E5%AD%98%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[问题描述npm run build 过程中出现oom，如下 1CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 解决方式转载 https://www.npmjs.com/package/increase-memory-limit 第一种方式1$ export NODE_OPTIONS=--max_old_space_size=4096 第二种方式12$ npm install -g increase-memory-limit$ increase-memory-limit]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo个人博客搭建]]></title>
    <url>%2F2019%2F08%2F05%2Fhexo%2Fhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装Git、Node.js和hexo Git,Node自行查看和安装 12$ node -v #是否出现安装版本信息，出现说明已经安装了$ git --version #同上述情况 hexo安装 12345678# 在你的家目录下创建一个blog文件夹$ mkdir blog# 进入目录$ cd blog# 初始化目录$ hexo init# 开启本地服务 $ hexo s 生产静态文件推送到github 创建github个人公开仓库,仓库名必须时{username}.github.io 生产静态文件,推送到个人仓库 12345# 生产静态文件$ hexo g$ npm install hexo-deployer-git --save# 推送github$ hexo d 设置主题 挑选和下载 1234# 挑选主题$ https://hexo.io/themes/# 下载$ git clone https://github.com/wuchong/jacman.git &#123;hexo_root&#125;/themes/Jacman 设置主题 123456# 编辑hexo配置文件$ vi &#123;hexo_root&#125;/_config.yml# 找到theme，并变更，如···theme: Jacman··· 文章发布 把需要发布的md文件放到{hexo_root}/source/_posts，重新打包生产静态文件和推送即可 主题自定义设置 进入主题文件夹，自定义设置 12# 打开_config.yml$ vi &#123;hexo_root&#125;/themes/Jacman/_config.yml 配置说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146##### Menumenu: 主页|Home: / 归档|Archives: /archives 简介|About: /about## you can create `tags` and `categories` folders in `../source`.## And create a `index.md` file in each of them.## set `front-matter`as## layout: tags (or categories)## title: tags (or categories)## ---# 右边显示部分，按着排序进行排序，我用到了分类，标签，友情链接，微博，rss#### Widgetswidgets: - github-card- category- tag#- links#- douban#- rss- weibo ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo#### RSS rss: /atom.xml ## RSS address.#### Imageimglogo: enable: true ## display image logo true/false. src: img/logo.png ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.favicon: img/favicon.ico ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`. apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this.banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture### Theme Color theme_color: theme: &apos;#2ca6cb&apos; ##the defaut theme color is blue# 代码高亮主题# available: default | nighthighlight_theme: default# 首页文章是否展开。默认为展开式，显示 Read More#### index post is expanding or not index: expand: true ## default is unexpanding,so you can only see the short description of each post. excerpt_link: Read More # 是否在文章页面自动关闭侧边栏close_aside: false #close sidebar in post page if truemathjax: false #enable mathjax if true### Creative Commons License Support, see http://creativecommons.org/ ### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zerocreative_commons: none# 作者信息，显示在网站底部。主要包括，文字介绍，以及图片。还有各种你的链接包括微博等等。换成你id就行；#### Author informationauthor: intro_line1: &quot;水滴石穿，日积月累&quot; ## your introduction on the bottom of the page intro_line2: &quot;可持续发展，与时俱进&quot; ## the 2nd line# weibo: 2176287895 ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895# weibo_verifier: b3593ceb ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed. tsina: ## e.g. 2176287895 Your weibo ID,It will be used in share button. douban: ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014 zhihu: ## e.g. jark for http://www.zhihu.com/people/jark email: ## e.g. imjark@gmail.com twitter: ## e.g. jarkwu for https://twitter.com/jarkwu github: ## e.g. wuchong for https://github.com/wuchong facebook: ## e.g. imjark for https://facebook.com/imjark linkedin: ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014 google_plus: ## e.g. &quot;111190881341800841449&quot; for https://plus.google.com/u/0/111190881341800841449, the &quot;&quot; is needed! stackoverflow: ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark## if you set them, the corresponding share button will show on the footer#### 目录，是否在文章中显示目录。显示在侧边栏；#### Toctoc: article: true ## show contents in article. aside: true ## show contents in aside.## you can set both of the value to true of neither of them.## if you don&apos;t want display contents in a specified post,you can modify `front-matter` and add `toc: false`.#### 友情链接#### Linkslinks: 码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区 Jark&apos;s Blog: http://wuchong.me#### 评论 国内用多说很好。注册账号，写在这里就ok#### Commentduoshuo_shortname: ## e.g. wuchong your duoshuo short name.disqus_shortname: ## e.g. wuchong your disqus short name.gentie_key: ## your 163 gentie key, see https://gentie.163.com/changyan_appid: ## changyan app id, see http://changyan.kuaizhan.com/changyan_appkey: ## changyan app key, see http://changyan.kuaizhan.com/#### 主题自带分享，这里用了false#### Share buttonjiathis: enable: false ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display. id: ## e.g. 1889330 your jiathis ID. tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.####网站统计，我用的时cnzz统计#### Analyticsgoogle_analytics: enable: false id: ## e.g. UA-46321946-2 your google analytics ID. site: ## e.g. wuchong.me your google analytics site or set the value as auto.## You MUST upgrade to Universal Analytics first!## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CNbaidu_tongji: enable: true sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site codecnzz_tongji: enable: false siteid: ## e.g. 1253575964 your cnzz tongji site id#### MiscellaneousShowCustomFont: true ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.fancybox: true ## if you use gallery post or want use fancybox please set the value to true.totop: true ## if you want to scroll to top in every post set the value to true#### 自定义搜索，我用的时百度搜索#### Custom Searchgoogle_cse: enable: false cx: ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.## https://www.google.com/cse/ ## To enable the custom search You must create a &quot;search&quot; folder in &apos;/source&apos; and a &quot;index.md&quot; file## set the &apos;front-matter&apos; as## layout: search ## title: search## ---baidu_search: ## http://zn.baidu.com/ enable: false id: ## e.g. &quot;783281470518440642&quot; for your baidu search id site: http://zhannei.baidu.com/cse/site ## your can change to your site instead of the default site tinysou_search: ## http://tinysou.com/ enable: false id: ## e.g. &quot;4ac092ad8d749fdc6293&quot; for your tiny search id 站内搜索和链接等还需有后期完善 目前发现github屏蔽了百度站内搜索的爬虫，导致百度搜索不可使用，后期逐步完善]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F05%2Fhexo%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
